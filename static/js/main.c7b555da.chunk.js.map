{"version":3,"sources":["components/Buttons.js","components/Operators.js","App.js","serviceWorker.js","index.js"],"names":["Buttons","onClick","this","props","clicked","btnNum","React","Component","Operators","btnOps","App","state","numberClicked","operator","left","prevCalc","output","buttons","operators","numberBtnClickHandler","e","setState","target","textContent","operatorClickHandler","solve","clearClickHandler","result","numbers","map","num","ops","className","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wOAceA,G,6KAVP,OACI,6BAEM,4BAAQC,QAASC,KAAKC,MAAMC,SAAUF,KAAKC,MAAME,a,GAL7CC,IAAMC,YCYbC,E,uKAVP,OACI,6BAEQ,4BAAQP,QAASC,KAAKC,MAAMC,SAAUF,KAAKC,MAAMM,a,GAL7CH,IAAMC,WCmGfG,E,4MA9FbC,MAAQ,CACNC,cAAe,GACfC,SAAU,GACVC,KAAM,GACNC,SAAU,GACVC,OAAQ,I,EAGVC,QAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,G,EACtCC,UAAY,CAAC,IAAK,IAAK,IAAK,K,EAE5BC,sBAAwB,SAACC,GACvB,EAAKC,SAAS,CACZT,cAAe,EAAKD,MAAMC,cAAgBQ,EAAEE,OAAOC,e,EAIvDC,qBAAuB,SAACJ,GACtB,EAAKC,SAAS,CACZR,SAAUO,EAAEE,OAAOC,YACnBT,KAAM,EAAKH,MAAMC,cACjBG,SAAU,EAAKJ,MAAMI,SAAW,EAAKJ,MAAMC,cAAgBQ,EAAEE,OAAOC,YACpEX,cAAe,KAEU,KAAxB,EAAKD,MAAMI,UACZ,EAAKU,S,EAITC,kBAAoB,WAClB,EAAKL,SAAS,CACZT,cAAe,GACfC,SAAU,GACVC,KAAM,GACNC,SAAU,GACVC,OAAQ,M,EAIZS,MAAQ,WACN,IAAIE,EACJ,OAAO,EAAKhB,MAAME,UAChB,IAAK,IACHc,EAAyB,EAAhB,EAAKhB,MAAMG,KAAkC,EAAzB,EAAKH,MAAMC,cACxC,MACF,IAAK,IACHe,EAAyB,EAAhB,EAAKhB,MAAMG,KAAkC,EAAzB,EAAKH,MAAMC,cACxC,MACF,IAAK,IACHe,EAAyB,EAAhB,EAAKhB,MAAMG,KAAS,EAAKH,MAAMC,cAAc,EACtD,MACF,IAAK,IACHe,EAAyB,EAAhB,EAAKhB,MAAMG,KAAS,EAAKH,MAAMC,cAAc,EACtD,MACF,QACE,MAAO,QAGX,EAAKS,SAAS,CACZL,OAAQW,K,uDAIH,IAAD,OACAC,EAAU1B,KAAKe,QAAQY,KAAK,SAACC,GACjC,OAAO,kBAAC,EAAD,CAASzB,OAAQyB,EAAK1B,QAAS,EAAKe,2BAGvCY,EAAM7B,KAAKgB,UAAUW,KAAK,SAACE,GAC/B,OAAO,kBAAC,EAAD,CAAWtB,OAAQsB,EAAK3B,QAAS,EAAKoB,0BAG7C,OACE,yBAAKQ,UAAU,OACb,yBAAKC,GAAG,UACR,6BAAM/B,KAAKS,MAAMI,UACf,6BAAMb,KAAKS,MAAMC,eACjB,kCAAQV,KAAKS,MAAMK,SAGrB,yBAAKiB,GAAG,WACLL,GAEH,yBAAKK,GAAG,WACLF,EACD,4BAAQ9B,QAASC,KAAKuB,OAAtB,MAEF,yBAAKQ,GAAG,YAAW,4BAAQhC,QAASC,KAAKwB,mBAAtB,e,GAzFXpB,IAAMC,WCOJ2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c7b555da.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Buttons extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                  <button onClick={this.props.clicked}>{this.props.btnNum}</button>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Buttons;","import React from 'react';\r\n\r\nclass Operators extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    <button onClick={this.props.clicked}>{this.props.btnOps}</button>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Operators;","import React from 'react';\r\nimport './App.css';\r\nimport Buttons from './components/Buttons';\r\nimport Operators from './components/Operators';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    numberClicked: '',\r\n    operator: '',\r\n    left: '',\r\n    prevCalc: '',\r\n    output: ''\r\n  }\r\n\r\n  buttons = [1, 2, 3, 4, 5, 6, 7, 8 ,9, 0];\r\n  operators = ['+', '-', 'x', '/'];\r\n\r\n  numberBtnClickHandler = (e) => {\r\n    this.setState({\r\n      numberClicked: this.state.numberClicked + e.target.textContent\r\n    })\r\n  }\r\n\r\n  operatorClickHandler = (e) => {\r\n    this.setState({\r\n      operator: e.target.textContent,\r\n      left: this.state.numberClicked,\r\n      prevCalc: this.state.prevCalc + this.state.numberClicked + e.target.textContent,\r\n      numberClicked: '',\r\n    })\r\n    if(this.state.prevCalc !== ''){\r\n      this.solve()\r\n    }\r\n  }\r\n\r\n  clearClickHandler = () => {\r\n    this.setState({\r\n      numberClicked: '',\r\n      operator: '',\r\n      left: '',\r\n      prevCalc: '',\r\n      output: ''\r\n    })\r\n  }\r\n\r\n  solve = () => {\r\n    let result;\r\n    switch(this.state.operator) {\r\n      case '+':\r\n        result = this.state.left*1 + this.state.numberClicked*1;\r\n        break;\r\n      case '-':\r\n        result = this.state.left*1 - this.state.numberClicked*1;\r\n        break;  \r\n      case 'x':\r\n        result = this.state.left*1 * this.state.numberClicked*1;\r\n        break;\r\n      case '/':\r\n        result = this.state.left*1 / this.state.numberClicked*1;\r\n        break;\r\n      default:\r\n        return \"error\";  \r\n    }\r\n\r\n    this.setState({\r\n      output: result,\r\n    })\r\n  }\r\n  \r\n  render(){\r\n    const numbers = this.buttons.map ((num) => {\r\n      return <Buttons btnNum={num} clicked={this.numberBtnClickHandler}/>\r\n    })\r\n\r\n    const ops = this.operators.map ((ops) => {\r\n      return <Operators btnOps={ops} clicked={this.operatorClickHandler} />\r\n    })\r\n\r\n      return (\r\n        <div className=\"App\"> \r\n          <div id=\"output\"> \r\n          <div>{this.state.prevCalc}</div>\r\n            <div>{this.state.numberClicked}</div>\r\n            <div>= {this.state.output}</div>\r\n            \r\n          </div>\r\n          <div id=\"numBtns\">\r\n            {numbers}\r\n          </div>\r\n          <div id=\"opsBtns\">\r\n            {ops}\r\n            <button onClick={this.solve}>=</button>\r\n          </div>\r\n          <div id=\"clearBtn\"><button onClick={this.clearClickHandler}>CLEAR</button></div>\r\n        </div>\r\n      )\r\n  };\r\n  \r\n}\r\n\r\nexport default App;\r\n\r\n// import React, { Component } from 'react';\r\n// import './App.css';\r\n// import Digit from './Digit/Digit';\r\n// import OperationKey from './OperationKey/OperationKey';\r\n\r\n// class App extends Component {\r\n\r\n//   state = {\r\n//     result: 0,\r\n//     currentInput: 0,\r\n//     previousInput: 0,\r\n//     currentOperation: null\r\n//   }\r\n\r\n//   digits = [1, 2, 3, 4, 5, 6, 7, 8 ,9, 0];\r\n//   operations = ['+', '-', 'x', '/'];\r\n\r\n//   operationClickHandler = (operation) =>{\r\n//     const newState = {\r\n//       ...this.state\r\n//     }\r\n//     newState.previousInput = newState.currentInput;\r\n//     newState.currentInput = 0;\r\n//     newState.currentOperation = operation;\r\n\r\n//     if (newState.currentOperation) {\r\n//       newState.result = this.performOperation()\r\n//       newState.firstInput = newState.result;\r\n//     }    \r\n\r\n//     this.setState(newState);\r\n//   }\r\n\r\n//   performOperation = () =>{\r\n//     switch (this.state.currentOperation) {\r\n//       case '+':\r\n//         return this.state.currentInput + this.state.previousInput;\r\n//       case '-':\r\n//         return this.state.previousInput - this.state.currentInput;\r\n//       case 'x':\r\n//         return this.state.currentInput * this.state.previousInput;\r\n//       case '/':\r\n//         return this.state.previousInput / this.state.currentInput;\r\n//     }\r\n//   }\r\n  \r\n\r\n//   digitClickedHandler = (number) =>{\r\n//     let input = number;\r\n//     if ( this.state.currentInput !== 0 ){\r\n//       input = parseInt(`${this.state.currentInput}${input}`);\r\n//     }\r\n\r\n//     this.setState({\r\n//       currentInput: input,\r\n//     });\r\n//   }\r\n\r\n//   render(){\r\n\r\n//     const digitsKeys = this.digits.map(digit => {\r\n//       return <Digit key={digit} clicked={() => this.digitClickedHandler(digit)}>{digit}</Digit>\r\n//     }); \r\n\r\n//     const operationKeys = this.operations.map(operation => {\r\n//       return <OperationKey key={operation} clicked={() => this.operationClickHandler(operation)}>{operation}</OperationKey>\r\n//     });\r\n\r\n//     return (\r\n//       <div className=\"App\">\r\n//         <div>Result: {this.state.result}</div>\r\n//         <div>First Input: {this.state.currentInput}</div>\r\n//         <div>Operation: {this.state.currentOperation}</div>\r\n//         <div>Second Input: {this.state.previousInput}</div>\r\n//         <div>{digitsKeys}</div>\r\n//         <div>\r\n//           {operationKeys}\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n  \r\n// }\r\n\r\n// export default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}